[{"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/index.js":"1","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/store.js":"2","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reportWebVitals.js":"3","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/App.js":"4","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/productReducers.js":"5","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/userReducers.js":"6","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/orderReducer.js":"7","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/cartReducers.js":"8","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Footer.js":"9","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Header.js":"10","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/CartScreen.js":"11","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ShippingScreen.js":"12","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductScreen.js":"13","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/HomeScreen.js":"14","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProfileScreen.js":"15","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/RegisterScreen.js":"16","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/OrderScreen.js":"17","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductListScreen.js":"18","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/LoginScreen.js":"19","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/PaymentScreen.js":"20","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/UserEditScreen.js":"21","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductEditScreen.js":"22","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/UserListScreen.js":"23","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/OrderListScreen.js":"24","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/PlaceOrderScreen.js":"25","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/productConstants.js":"26","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/userConstants.js":"27","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/orderContants.js":"28","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Loader.js":"29","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/cartConstants.js":"30","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Product.js":"31","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Paginate.js":"32","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/ProductCarousel.js":"33","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Rating.js":"34","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/FormContainer.js":"35","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/CheckoutStep.js":"36","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/SearchBox.js":"37","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Message.js":"38","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/cartActions.js":"39","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/userActions.js":"40","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/orderAction.js":"41","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/productActions.js":"42"},{"size":672,"mtime":1675506085376,"results":"43","hashOfConfig":"44"},{"size":2441,"mtime":1676515662746,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1675412825371,"results":"46","hashOfConfig":"44"},{"size":2516,"mtime":1676519837733,"results":"47","hashOfConfig":"44"},{"size":3741,"mtime":1676515599852,"results":"48","hashOfConfig":"44"},{"size":3533,"mtime":1676295005773,"results":"49","hashOfConfig":"44"},{"size":3478,"mtime":1676358302634,"results":"50","hashOfConfig":"44"},{"size":1527,"mtime":1676186985073,"results":"51","hashOfConfig":"44"},{"size":375,"mtime":1675415469550,"results":"52","hashOfConfig":"44"},{"size":2959,"mtime":1676519760692,"results":"53","hashOfConfig":"44"},{"size":5101,"mtime":1676106189076,"results":"54","hashOfConfig":"44"},{"size":3282,"mtime":1676120294180,"results":"55","hashOfConfig":"44"},{"size":9793,"mtime":1676433251114,"results":"56","hashOfConfig":"44"},{"size":1803,"mtime":1676517460632,"results":"57","hashOfConfig":"44"},{"size":6609,"mtime":1676293622720,"results":"58","hashOfConfig":"44"},{"size":4267,"mtime":1676018292390,"results":"59","hashOfConfig":"44"},{"size":10617,"mtime":1676359449472,"results":"60","hashOfConfig":"44"},{"size":5136,"mtime":1676468461702,"results":"61","hashOfConfig":"44"},{"size":2657,"mtime":1676014924372,"results":"62","hashOfConfig":"44"},{"size":1894,"mtime":1676121867793,"results":"63","hashOfConfig":"44"},{"size":4110,"mtime":1676342170208,"results":"64","hashOfConfig":"44"},{"size":8536,"mtime":1676345613855,"results":"65","hashOfConfig":"44"},{"size":3564,"mtime":1676297707359,"results":"66","hashOfConfig":"44"},{"size":3551,"mtime":1676358529894,"results":"67","hashOfConfig":"44"},{"size":6363,"mtime":1676176013683,"results":"68","hashOfConfig":"44"},{"size":1550,"mtime":1676515511364,"results":"69","hashOfConfig":"44"},{"size":1506,"mtime":1676294895908,"results":"70","hashOfConfig":"44"},{"size":1256,"mtime":1676357835039,"results":"71","hashOfConfig":"44"},{"size":313,"mtime":1675693686270,"results":"72","hashOfConfig":"44"},{"size":285,"mtime":1676186485814,"results":"73","hashOfConfig":"44"},{"size":930,"mtime":1675430008998,"results":"74","hashOfConfig":"44"},{"size":988,"mtime":1676468058394,"results":"75","hashOfConfig":"44"},{"size":1258,"mtime":1676517363258,"results":"76","hashOfConfig":"44"},{"size":1586,"mtime":1675418971069,"results":"77","hashOfConfig":"44"},{"size":350,"mtime":1676009530277,"results":"78","hashOfConfig":"44"},{"size":1498,"mtime":1676108875539,"results":"79","hashOfConfig":"44"},{"size":978,"mtime":1676454720996,"results":"80","hashOfConfig":"44"},{"size":207,"mtime":1675929364186,"results":"81","hashOfConfig":"44"},{"size":1249,"mtime":1676186803853,"results":"82","hashOfConfig":"44"},{"size":6940,"mtime":1676296416484,"results":"83","hashOfConfig":"44"},{"size":5627,"mtime":1676360319489,"results":"84","hashOfConfig":"44"},{"size":5798,"mtime":1676516511305,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},"1tf5u5m",{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"89"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"89"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"89"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"89"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"89"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"89"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"89"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"89"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"89"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"89"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"89"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"89"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"89"},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"89"},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"89"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"89"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"89"},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"193","messages":"194","suppressedMessages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"89"},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"89"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"89"},{"filePath":"229","messages":"230","suppressedMessages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"89"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"89"},"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/index.js",[],[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/store.js",["237","238"],[],"import {configureStore, combineReducers, applyMiddleware} from '@reduxjs/toolkit'\nimport thunk from 'redux-thunk'\nimport {composewithDevTools} from 'redux-devtools-extension'\nimport {productListReducer, productDetailReducer, productDeleteReducer, \n    productCreateReducer, productUpdateReducer, productReviewCreateReducer, productTopRatedReducer} from './reducer/productReducers'\nimport {cartReducer} from './reducer/cartReducers'\nimport {userLoginReducer, userRegisterReducer, userDetailsReducer,\n     userUpdateProfileReducer, userListReducer, userDeleteReducer, \n     userUpdateReducer} from './reducer/userReducers'\nimport {orderReducer, orderDetailReducer, orderPayReducer, \n    orderListMyReducer, orderListReducer, orderDeliverReducer} from './reducer/orderReducer'\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetail : productDetailReducer,\n    productDelete: productDeleteReducer, \n    productCreate: productCreateReducer, \n    productUpdate: productUpdateReducer,  \n    productReviewCreate: productReviewCreateReducer, \n    productTopRated: productTopRatedReducer,\n\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer, \n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer, \n    userDelete: userDeleteReducer,  \n    userUpdate: userUpdateReducer,\n\n    orderCreate: orderReducer, \n    orderDetail: orderDetailReducer, \n    orderPay: orderPayReducer, \n    orderListMy : orderListMyReducer, \n    orderList : orderListReducer, \n    orderDeliver: orderDeliverReducer, \n    \n})\n\n// get string to JSON load in localstorages\nconst cartItemFromStorage = localStorage.getItem('cartItems') ?\n        JSON.parse(localStorage.getItem('cartItems')) : [];\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ?\n        JSON.parse(localStorage.getItem('userInfo')) : null;\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ?\n        JSON.parse(localStorage.getItem('shippingAddress')) : {};\n\n\nexport const initialState = {\n    cart: {\n        cartItems: cartItemFromStorage,\n        shippingAddress: shippingAddressFromStorage\n    },\n    userLogin: {userInfo: userInfoFromStorage}\n\n};\n\n// thunk \nconst middleware = [thunk]; \n\n\nconst store = configureStore({\n    reducer: reducer,\n    preloadedState: initialState,\n    middleware: middleware,\n});\n\nexport default store; ","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reportWebVitals.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/App.js",["239"],[]," import Footer from './components/Footer'\n import Header from './components/Header'\n import { Container } from 'react-bootstrap'\n import HomeScreen from './screens/HomeScreen'\n import ProductScreen from './screens/ProductScreen'\n import CartScreen from './screens/CartScreen'\n import {Routes, Route, HashRouter as Router} from 'react-router-dom'\n import LoginScreen from './screens/LoginScreen'\n import RegisterScreen from './screens/RegisterScreen'\n import ProfileScreen from './screens/ProfileScreen'\n import ShippingScreen from './screens/ShippingScreen'\n import PaymentScreen from './screens/PaymentScreen'\n import PlaceOrderScreen from './screens/PlaceOrderScreen'\n import OrderScreen from './screens/OrderScreen'\n import UserListScreen from './screens/UserListScreen'\n import UserEditScreen from './screens/UserEditScreen'\n import ProductListScreen from './screens/ProductListScreen'\n import ProductEditScreen from './screens/ProductEditScreen'\n import OrderListScreen from './screens/OrderListScreen'\nconst initialOptions = { \n  \"client-id\": \"AfMS5hQmnyBW3oam7UmMp4B8Bk612ky2npFD4a8_-osb6bsPrJmomJD9hB-wc7idSd2oNrbD4A8TNE2_\",\n  currency:\"USD\",\n  intent: \"capture\", \n};\n\nfunction App() {\n  return (\n\n    <Router>\n      <Header /> \n      <main className=\"py-3\">\n        <Container>\n          <Routes>\n            {\" \"}\n            <Route path='/' element={<HomeScreen />} /> \n            <Route path='/product/:id' element={<ProductScreen />} /> \n            <Route path='/cart/:id?' element={<CartScreen />} /> \n            <Route path='/login' element={<LoginScreen />} /> \n            <Route path='/register' element={<RegisterScreen />} /> \n            <Route path='/profile' element={<ProfileScreen />} /> \n            <Route path='/shipping' element={<ShippingScreen />} /> \n            <Route path='/payment' element={<PaymentScreen />} /> \n            <Route path='/placeorder' element={<PlaceOrderScreen/>} /> \n            <Route path='/order/:orderId' element={<OrderScreen/>} /> \n            <Route path='/admin/userlist' element={<UserListScreen/>} /> \n            <Route path='/admin/user/:id/edit' element={<UserEditScreen/>} /> \n            <Route path='/admin/productlist' element={<ProductListScreen/>} /> \n            <Route path='/admin/orderlist' element={<OrderListScreen/>} /> \n            <Route path='/admin/product/:id/edit' element={<ProductEditScreen/>} /> \n          </Routes>\n        </Container> \n        \n      </main>\n      <Footer /> \n    </Router>\n\n  );\n}\n\nexport default App;\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/productReducers.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/userReducers.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/orderReducer.js",["240"],[],"import * as cons from '../constants/orderContants'\n\nimport React from 'react'\n\nexport function orderReducer(state ={}, action) {\n  switch (action.type) {\n    case cons.ORDER_CREATE_REQUEST:\n        return {\n            loading:true \n        }\n           \n    case cons.ORDER_CREATE_SUCESS:\n        return {\n            loading: false,\n            success: true,\n            order: action.payload  \n        }\n    case cons.ORDER_CREATE_FAILED: \n        return {\n            loading:false,\n            error: action.payload \n\n        }\n\n    case cons.ORDER_CREATE_RESET: \n        return {\n        }\n\n    \n\n    default:\n        return state \n\n  }\n\n}\n  \n\n\nexport function orderDetailReducer(state ={loading: true, orderItem:[], shippingAddress: {}}, action) {\n    switch (action.type) {\n      case cons.ORDER_DETAIL_REQUEST:\n          return {\n              ...state, \n              loading:true \n          }\n             \n      case cons.ORDER_DETAIL_SUCCESS:\n          return {\n              loading: false,\n              order: action.payload  \n          }\n      case cons.ORDER_DETAIL_FAILED: \n          return {\n              loading:false,\n              error: action.payload \n          }\n      default:\n          return state \n    }\n  }\n\n\n  export function orderPayReducer(state ={}, action) {\n    switch (action.type) {\n      case cons.ORDER_PAY_REQUEST:\n          return {\n              loading:true \n          }\n             \n      case cons.ORDER_PAY_SUCCESS:\n          return {\n              loading: false,\n              success: true\n          }\n      case cons.ORDER_PAY_FAILED: \n          return {\n              loading:false,\n              error: action.payload \n          }\n\n        case cons.ORDER_PAY_RESET: \n          return {}\n\n      default:\n          return state \n    }\n  }\n\n\n  export function orderDeliverReducer(state ={}, action) {\n    switch (action.type) {\n      case cons.ORDER_DELIVER_REQUEST:\n          return {\n              loading:true \n          }\n             \n      case cons.ORDER_DELIVER_SUCCESS:\n          return {\n              loading: false,\n              success: true\n          }\n      case cons.ORDER_DELIVER_FAILED: \n          return {\n              loading:false,\n              error: action.payload \n          }\n\n        case cons.ORDER_DELIVER_RESET: \n          return {}\n\n      default:\n          return state \n    }\n  }\n\n  export function orderListMyReducer(state ={orders:[]}, action) {\n    switch (action.type) {\n      case cons.ORDER_LIST_MY_REQUEST:\n          return {\n              loading:true \n          }\n             \n      case cons.ORDER_LIST_MY_SUCCESS:\n          return {\n              loading: false,\n              orders: action.payload\n          }\n      case cons.ORDER_LIST_MY_FAILED: \n          return {\n              loading:false,\n              error: action.payload \n          }\n\n        case cons.ORDER_LIST_MY_RESET: \n          return {\n              orders: []\n          }\n      default:\n          return state \n    }\n  }\n    \n\nexport function orderListReducer(state ={orders:[]}, action) {\nswitch (action.type) {\n    case cons.ORDER_LIST_REQUEST:\n        return {\n            loading:true \n        }\n            \n    case cons.ORDER_LIST_SUCCESS:\n        return {\n            loading: false,\n            orders: action.payload\n        }\n    case cons.ORDER_LIST_FAILED: \n        return {\n            loading:false,\n            error: action.payload \n        }\n\n    default:\n        return state \n}\n}\n\n\n\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/reducer/cartReducers.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Footer.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Header.js",["241"],[],"import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Navbar, Nav, Container, Row, NavDropdown} from 'react-bootstrap'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport { logout } from '../actions/userActions'\nimport SearchBox from './SearchBox'\n\nfunction Header() {\n\n    const userLogin = useSelector((state) => state.userLogin);\n    const {userInfo} = userLogin \n    const dispatch = useDispatch()\n\n    const logoutHandler = () => {\n        dispatch(logout())\n    }\n\n  return (\n    <header>\n        <Navbar bg=\"success\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n            <Container>\n                <LinkContainer to='/'>\n                    <Navbar.Brand>Lovttery</Navbar.Brand>\n                </LinkContainer>\n\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                   \n                    <SearchBox />\n                    <Nav className=\"ms-auto\">\n                    \n                        <LinkContainer to='/cart'>\n                            <Nav.Link><i className=\"fas fa-shopping-cart\"></i> Cart</Nav.Link>\n                        </LinkContainer>\n    \n                        {userInfo ? (\n                            <NavDropdown title = {userInfo.name} id ='username'>\n                                <LinkContainer to='/profile' >\n                                    <NavDropdown.Item> Profile  </NavDropdown.Item> \n                                </LinkContainer> \n                                <NavDropdown.Item onClick={logoutHandler}> Log out  </NavDropdown.Item> \n\n                            </NavDropdown > \n                        ): (\n                            <LinkContainer to='/login'>\n                                <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\n                            </LinkContainer>\n\n                            )}\n\n                            {userInfo && userInfo.isAdmin &&(\n                                <NavDropdown title = 'Admin' id ='adminmenu'>\n                                <LinkContainer to='/admin/userlist' >\n                                    <NavDropdown.Item> Users  </NavDropdown.Item> \n                                </LinkContainer> \n\n                                <LinkContainer to='/admin/productlist' >\n                                    <NavDropdown.Item> Products  </NavDropdown.Item> \n                                </LinkContainer> \n                            \n                                <LinkContainer to='/admin/orderlist' >\n                                    <NavDropdown.Item> Orders  </NavDropdown.Item> \n                                </LinkContainer> \n\n                            </NavDropdown > \n                            )}\n                        \n                    </Nav>\n                </Navbar.Collapse>\n            </Container> \n        </Navbar>\n    </header>\n  )\n}\n\nexport default Header","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/CartScreen.js",["242","243"],[],"import React, {useEffect} from 'react'\nimport {Link, useParams, useNavigate, useSearchParams} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Row, Col, ListGroup, Image, Button, Card, Form, ListGroupItem } from 'react-bootstrap'\nimport Message from '../components/Message'\nimport {addToCart, removeFromCart} from '../actions/cartActions'\n\nfunction CartScreen() {\n    const navigate = useNavigate(); \n    const {id} = useParams();\n    const[searchParams, setSearchParams]= useSearchParams(); \n    const qty = Number(searchParams.get('qty'));\n    const dispatch = useDispatch();\n    const cart = useSelector((state) => state.cart); \n    const { cartItems }  = cart;  \n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n\n    useEffect( () => {\n        if (id) {\n            dispatch(addToCart(id,qty)); \n        }\n    }, [dispatch, id, qty]); \n\n    const  removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n\n    const checkOutHandler = () => {\n        if (!userInfo){\n            navigate('/login') \n        }else{\n            navigate('/shipping')\n        }; \n    }\n\n    return (\n        <Row> \n            <Col md={8}>\n                <h1> Shopping Cart</h1>\n                {cartItems.length === 0 ? (\n                    <Message variant='info'>\n                        Your cart is empty <Link to='/'> Go Back</Link>\n                    </Message>\n                ): (\n                    <ListGroup variant='flush'>\n                        {cartItems.map(item => (\n                            <ListGroup.Item key ={item.product}>\n                                <Row> \n                                    <Col md={2}> \n                                        <Image src={item.image} alt={item.name} fluid rounded/>\n                                    </Col>\n                                    <Col md={3}>\n                                        <Link to= {`/product/${item.product}`} > {item.name} </Link>\n                                    </Col>\n                                    <Col md ={2}>\n                                         ${item.price}\n                                    </Col>\n\n                                    <Col md={3}>\n                                        <Form.Control\n                                                as = \"select\"\n                                                value={item.qty}\n                                                onChange={(e)=> dispatch(addToCart(Number(item.product), Number(e.target.value)))}\n                                            >\n                                                {\n                                                    \n                                                    [...Array(item.countInStock).keys()].map((x) => (\n                                                        <option key={x+1} value={x+1}>\n                                                            {x + 1}\n                                                        </option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                    </Col>\n\n                                    \n                                    <Col md={1}>\n                                        <Button\n                                            type='button'\n                                            cariant = 'light'\n                                            onClick = {() => removeFromCartHandler(item.product)}\n                                        >\n                                            <i className='fas fa-trash'> </i>  \n                                        </Button>\n                                    \n                                    </Col>\n                                    \n                                </Row>\n                            </ListGroup.Item>\n                            \n                        ))}\n\n                    </ListGroup>\n                )\n                \n                }\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'> \n                        <ListGroup.Item>  \n                            <h2> Subtotal ({cartItems.reduce((acc, item) => acc + item.qty, 0)}) items </h2>\n                            ${cartItems.reduce((acc, item) => acc + item.qty * item.price, 0).toFixed()}\n                        </ListGroup.Item>  \n                    </ListGroup>  \n\n                    <ListGroup> \n                        <Button\n                            type='button'\n                            className = 'btn-block'\n                            disabled={cartItems.length === 0}\n                            onClick = {checkOutHandler}\n                        >\n                            Proceed to Checkout \n                        </Button>\n                    </ListGroup>    \n\n                </Card>\n            </Col>\n        </Row>  \n    );\n\n}\n\nexport default CartScreen;","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ShippingScreen.js",["244","245","246","247","248","249","250","251"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutStep from '../components/CheckoutStep'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { saveShippingAddress } from '../actions/cartActions'\n\nexport default function ShippingScreen() {\n\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.city)\n\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\n        navigate('/payment')\n\n    }\n\n    return (\n      <FormContainer>\n          <CheckoutStep step1 step2/>\n          <h1> Shipping </h1> \n        <Form onSubmit={submitHandler} > \n            <Form.Group controlId ='address'>\n                <Form.Label>  Address </Form.Label>\n                <Form.Control   \n                    required                   \n                    type=\"text\"\n                    placeholder =\"Enter Address\"\n                    value = {address ? address : ''}\n                    onChange = {(e) => setAddress(e.target.value)}\n                > \n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId ='city'>\n                <Form.Label>  City </Form.Label>\n                <Form.Control   \n                    required                   \n                    type=\"text\"\n                    placeholder =\"Enter city\"\n                    value = {city ? city : ''}\n                    onChange = {(e) => setCity(e.target.value)}\n                > \n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId ='postalCode'>\n                <Form.Label>  Postal Code </Form.Label>\n                <Form.Control   \n                    required                   \n                    type=\"text\"\n                    placeholder =\"Enter postalcode\"\n                    value = {postalCode ? postalCode : ''}\n                    onChange = {(e) => setPostalCode(e.target.value)}\n                > \n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId ='country'>\n                <Form.Label>  Country </Form.Label>\n                <Form.Control   \n                    required                   \n                    type=\"text\"\n                    placeholder =\"Enter country\"\n                    value = {country ? country : ''}\n                    onChange = {(e) => setCountry(e.target.value)}\n                > \n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Continue\n            </Button>\n            \n        </Form>\n      </FormContainer>\n    )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductScreen.js",["252"],[],"import React ,{useState, useEffect} from 'react'\nimport {Link, useParams, useNavigate} from 'react-router-dom'\nimport {Row, Col, Image, ListGroup, Button, Card, Form, ListGroupItem} from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {listProductsDetails, createProductReview} from '../actions/productActions'\nimport * as cons from '../constants/productConstants'\n\nfunction ProductScreen() {\n    const [qty, setqty] = useState(1);\n    const [rating, setRating] = useState(0);\n    const [comment, setComment] = useState(\"\");\n\n    const navigate = useNavigate();\n\n    const match = useParams()\n    const dispatch = useDispatch() \n\n    const productDetails = useSelector(state => state.productDetail)\n    const {loading, error, product} = productDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const productReviewCreate = useSelector(state => state.productReviewCreate)\n    const {loading: loadingProductReview, error:  errorProductReview, success: successProductReview} = productReviewCreate\n\n    useEffect(() => {\n        if(successProductReview){\n            setRating(0)\n            setComment('')\n            dispatch({type: cons.PRODUCT_CREATE_REVIEW_RESET })\n        }\n\n        dispatch(listProductsDetails(match.id))\n\n    }, [dispatch, match, successProductReview ])\n\n    const addToCartHandler = () => {\n        navigate(`/cart/${match.id}?qty=${qty}`)\n    }\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(createProductReview(\n            match.id, {\n            rating,\n            comment\n        }\n        ))\n    }\n\n\n    return (\n    <div>\n        <Link to='/' className='btn btn-light my-3'> Go back </Link> \n        {\n        loading ? \n            <Loader />\n            : error \n                ? <Message variant='danger'>{error}</Message>\n            :(\n            <div> \n                <Row> \n                <Col md={6}>\n                    <Image src={product.image} alt={product.name} fluid />\n                </Col>\n    \n                <Col md={3}>\n                    <ListGroup variant=\"flush\"> \n                        <ListGroup.Item> \n                            <h3> {product.name} </h3>\n                        </ListGroup.Item>\n    \n                        <ListGroup.Item> \n                            <Rating value={product.rating} text={`${product.numReviews} reviews`} color={`#7FD4BF`} /> \n                        </ListGroup.Item>\n    \n                        <ListGroup.Item> \n                            Price: ${product.price}\n                        </ListGroup.Item>\n    \n                        <ListGroup.Item> \n                            Description: {product.description}\n                        </ListGroup.Item> \n    \n                    </ListGroup>  \n                </Col>\n    \n                <Col md={3}>\n                    <Card> \n                        <ListGroup variant='flush'> \n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Price:</Col>\n                                    <Col>\n                                     <strong>${product.price}</strong>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n    \n                            <ListGroup.Item>\n                                <Row>\n                                    <Col>Status:</Col>\n                                    <Col>\n                                       {product.countInStock > 0 ?'In Stock' : 'Out of Stock'}\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            {product.countInStock > 0 &&(\n                                <ListGroupItem>\n                                    <Row>\n                                        <Col> Qty </Col>\n                                        <Col xs='auto' className='my-1'> \n                                            <Form.Control\n                                                as = \"select\"\n                                                value={qty}\n                                                onChange={(e)=> setqty(e.target.value)}\n                                            >\n                                                {\n                                                    \n                                                    [...Array(product.countInStock).keys()].map((x) => (\n                                                        <option key={x+1} value={x+1}>\n                                                            {x + 1}\n                                                        </option>\n                                                    ))\n                                                }\n                                            </Form.Control>\n                                        </Col>\n                                    </Row>\n                                </ListGroupItem>\n                            )}\n    \n                            <ListGroup.Item>\n                                <Button \n                                    onClick={addToCartHandler}\n                                    className ='col-12' \n                                    disabled={product.countInStock == 0} \n                                    type='button'> \n                                    Add to Cart\n                                </Button>\n                            </ListGroup.Item>\n    \n    \n                        </ListGroup>\n                    </Card>\n                </Col>\n                </Row>\n\n                <Row>\n                    <Col md={6}>\n                        <h4> Reviews </h4>\n                        {product.reviews.length === 0 && <Message variant='primary'>  No Review </Message>}\n\n                        <ListGroup variant='flush'> \n                            {product.reviews.map((review)=> (\n                                <ListGroup.Item key={review._id}>\n                                    <strong> {review.name} </strong>  \n                                    <Rating value={review.rating} color=\"#7FD4BF\"/>\n                                    <p> {review.createAt.substring(0,10)} </p>\n                                    <p> {review.comment} </p>\n                                </ListGroup.Item>\n                            ))}\n                            <ListGroup.Item> \n                                <h4> Write a Review </h4>\n                                {loadingProductReview && <Loader /> }\n                                {successProductReview && <Message variant='success'>  Review Submitted </Message>}\n                                {errorProductReview && <Message variant='danger'>  {errorProductReview} </Message>}\n\n                                {userInfo ? (\n                                    <Form onSubmit={submitHandler}> \n                                        <Form.Group controlId='rating'> \n                                            <Form.Label> \n                                                Rating\n                                            </Form.Label>\n                                            <Form.Control\n                                            as ='select'\n                                            value = {rating}\n                                            onChange ={(e) => setRating(e.target.value)}\n                                            \n                                            > \n                                                <option value='select...'> </option>\n                                                <option value='1'> 1 - Poor </option>\n                                                <option value='2'> 2 - Fair</option>\n                                                <option value='3'> 3 - Good  </option>\n                                                <option value='4'> 4 - Very Good </option>\n                                                <option value='5'> 5 - Supurb </option>\n\n                                            </Form.Control>\n                                        </Form.Group>\n\n                                        <Form.Group controlId='comment'>\n                                            <Form.Label> Review </Form.Label>\n                                            <Form.Control\n                                                as ='textarea'\n                                                row = '5'\n                                                value ={comment}\n                                                onChange={(e)=> setComment(e.target.value)}\n                                            > </Form.Control>\n                                        </Form.Group>  \n\n                                        <Button\n                                            disabled ={loadingProductReview} \n                                            type='submit'\n                                            variant ='primary'\n                                        >  Submit\n                                        </Button>\n\n                                    </Form>\n                                ): (\n                                    <Message variant='primary'> Please <Link to='/login'> Login </Link>  to write a review </Message>\n                                )}\n                            </ListGroup.Item>\n                        </ListGroup>\n                    </Col>\n                </Row>\n            </div>\n            )\n        }\n        \n\n\n\n    </div>\n  )\n}\n\nexport default ProductScreen","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/HomeScreen.js",["253","254"],[],"import React,{useState, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Row, Col} from 'react-bootstrap'\nimport Product from '../components/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport {listProducts} from '../actions/productActions'\nimport {useSearchParams, useLocation} from 'react-router-dom'\nimport  ProductCarousel from '../components/ProductCarousel'\n\n\n// API call and actions \nfunction HomeScreen() {\n    const dispatch = useDispatch()\n    const productList = useSelector(state => state.productList)\n    const {error, loading, products, page, pages } = productList\n    \n    const location = useLocation()\n    let keyword = location.search\n\n    // if (keyword){\n    //     keyword = keyword.split('?keyword=')[1].split('&page')[0]\n    // } \n    // console.log(keyword)\n\n    useEffect(() => {\n        dispatch(listProducts(keyword))\n      \n    }, [dispatch, keyword])\n\n\n  \n    return (\n        <div>\n            {!keyword && <ProductCarousel /> }\n        \n            <h1>LATEST PRODUCTS</h1>\n            {loading ? <Loader /> \n                : error ? <Message variant='danger'> {error} </Message> \n                    : \n                    <div> \n                        <Row>\n                            {products.map(product =>(\n                                <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                                    <Product product={product} />\n                                </Col>\n                            ))}\n                        </Row>\n                        <Paginate page={page} pages={pages} keyword={keyword} /> \n                    </div> \n            }\n        </div>\n  )\n}\n\nexport default HomeScreen","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProfileScreen.js",["255","256"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport {LinkContainer} from 'react-router-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport * as cons from '../constants/userConstants'\nimport {listMyOrders} from '../actions/orderAction'\n\nexport default function ProfileScreen() {\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmedPassword, setConfirmedPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    // const[searchParams, setSearchParams]= useSearchParams(); \n    // const redirect = searchParams.get('redirect');\n\n    const location = useLocation()\n    const navigate = useNavigate(); \n    const dispatch = useDispatch()\n\n   \n    const userDetails = useSelector(state => state.userDetails)\n    const {error, loading, user} = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin \n    \n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const {success} = userUpdateProfile \n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const {loading: loadingOrders, error: errorOrders, orders} = orderListMy \n\n    useEffect(() => {\n        if(!userInfo) {\n            navigate('/login')\n        }else{\n            if( !user || !user.name || success || userInfo._id !== user._id){\n                dispatch({type:cons.USER_UPDATE_PROFILE_RESET})\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    }, [navigate, userInfo, dispatch, user, success])\n\n\n\n    const submitHandler = (e) => { \n        e.preventDefault()\n        if(password !== confirmedPassword){\n            setMessage('Password did not match')\n        }else{\n           dispatch(updateUserProfile({\n               'id':user._id,\n                'name': name,\n                'email': email,\n                'password': password\n            }))\n            setMessage('')\n        }\n \n    }\n\n  return (\n    <Row>\n        <Col md={3}> \n            <h2> User Profile</h2>  \n            {message && <Message variant='danger'> {message} </Message>  }\n            {error && <Message variant='danger'> {error} </Message>  }\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}> \n                <Form.Group controlId ='name'>\n                    <Form.Label> Name Address </Form.Label>\n                    <Form.Control     \n                        required                \n                        type=\"name\"\n                        placeholder =\"Enter Name\"\n                        value = {name}\n                        onChange = {(e) => setName(e.target.value)}\n                    > \n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId ='email'>\n                    <Form.Label> Email Address </Form.Label>\n                    <Form.Control   \n                        required                   \n                        type=\"email\"\n                        placeholder =\"Enter Email\"\n                        value = {email}\n                        onChange = {(e) => setEmail(e.target.value)}\n                    > \n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId ='password'>\n                    <Form.Label> Password </Form.Label>\n                    <Form.Control                  \n                        type=\"password\"\n                        placeholder =\"Enter Password\"\n                        value = {password}\n                        onChange = {(e) => setPassword(e.target.value)}\n                    >  \n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId ='passwordConfirmed'>\n                    <Form.Label> Confirm Password </Form.Label>\n                    <Form.Control                  \n                        type=\"password\"\n                        placeholder =\"Confirm Password\"\n                        value = {confirmedPassword}\n                        onChange = {(e) => setConfirmedPassword(e.target.value)}\n                    >  \n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Update\n                </Button>\n\n            </Form>  \n        </Col>\n\n        \n        <Col md={9}> \n            <h2> My Orders</h2> \n            {loadingOrders ? (\n                <Loader/> \n            ): errorOrders ? ( \n                <Message variant='danger'> {errorOrders} </Message>\n            ):(\n                <Table striped responsive className='table-sm'> \n                    <thead>\n                        <tr> \n                            <th> ID </th>\n                            <th> Date </th>\n                            <th> Total </th>\n                            <th> Paid </th>\n                            <th> Delivered </th>\n                            <th> </th>\n                        </tr>\n                    </thead> \n                    <tbody> \n                        {orders.map(order => (\n                            <tr key= {order._id} > \n                                <td> {order._id}</td>\n                                <td> {order.createdAt.substring(0,10)}</td>\n                                <td> {order.totalPrice}</td>\n                                <td> {order.isPaid ? order.paidAt.substring(0,10) : (\n                                    <i className='fas fa-times' style={{color:'red'}}> </i>\n                                    )} </td>\n                        \n                                <td> \n                                    <LinkContainer to={`/order/${order._id}`}> \n                                        <Button className='btn-sm'> Details </Button>\n                                    </LinkContainer>\n                                </td>\n                                <td> \n\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n\n                </Table>\n            )}\n\n        </Col>\n\n    </Row>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/RegisterScreen.js",["257"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { register } from '../actions/userActions'\n\nexport default function RegisterScreen() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmedPassword, setConfirmedPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    // const[searchParams, setSearchParams]= useSearchParams(); \n    // const redirect = searchParams.get('redirect');\n\n    const location = useLocation()\n    const navigate = useNavigate(); \n    const dispatch = useDispatch()\n\n    const redirect = location.state? Number(location.state) : '/'\n    const userRegister = useSelector(state => state.userRegister)\n    const {error, loading, userInfo} = userRegister\n\n    useEffect(() => {\n        if(userInfo) {\n            navigate(redirect)\n        }\n    }, [navigate, userInfo, redirect])\n\n\n\n    const submitHandler = (e) => { \n        e.preventDefault()\n\n\n        if(password !== confirmedPassword){\n            setMessage('PAssword idd not match')\n        }else{\n            dispatch(register(name, email,password))   \n        }\n \n    }\n    return (\n        <FormContainer>\n            <h1> Sign In </h1>\n            {message && <Message variant='danger'> {message} </Message>  }\n            {error && <Message variant='danger'> {error} </Message>  }\n            {loading && <Loader />}\n            <Form onSubmit={submitHandler}> \n                <Form.Group controlId ='name'>\n                    <Form.Label> Name Address </Form.Label>\n                    <Form.Control     \n                        required                \n                        type=\"name\"\n                        placeholder =\"Enter Name\"\n                        value = {name}\n                        onChange = {(e) => setName(e.target.value)}\n                    > \n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId ='email'>\n                    <Form.Label> Email Address </Form.Label>\n                    <Form.Control   \n                        required                   \n                        type=\"email\"\n                        placeholder =\"Enter Email\"\n                        value = {email}\n                        onChange = {(e) => setEmail(e.target.value)}\n                    > \n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId ='password'>\n                    <Form.Label> Password </Form.Label>\n                    <Form.Control\n                        required                      \n                        type=\"password\"\n                        placeholder =\"Enter Password\"\n                        value = {password}\n                        onChange = {(e) => setPassword(e.target.value)}\n                    >  \n                    </Form.Control>\n                </Form.Group>\n\n\n                <Form.Group controlId ='passwordConfirmed'>\n                    <Form.Label> Confirm Password </Form.Label>\n                    <Form.Control\n                        required                      \n                        type=\"password\"\n                        placeholder =\"Confirm Password\"\n                        value = {confirmedPassword}\n                        onChange = {(e) => setConfirmedPassword(e.target.value)}\n                    >  \n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Register\n                </Button>\n\n            </Form> \n\n            <Row className='py-3'>\n                <Col>\n                    Have an account ?\n                        <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}> \n                            Login \n                        </Link>\n                </Col>\n            </Row>\n\n        </FormContainer>\n        )\n\n}","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/OrderScreen.js",["258","259","260","261","262","263","264","265"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom'\nimport {Form, Button, Row, Col, Image, ListGroup, ListGroupItem, Card} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {getOrderDetail, payOrder, deliverOrder} from '../actions/orderAction'\nimport * as cons from '../constants/orderContants'\nimport {PayPalScriptProvider, PayPalButtons} from '@paypal/react-paypal-js'\n\n\n\n\nexport default function OrderScreen() {\n    const {orderId} = useParams()\n  \n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const {sdkReady, setSdkReady} = useState(false)\n\n    const orderDetail = useSelector(state => state.orderDetail)\n    const {order, error, loading} = orderDetail\n\n    const orderPay = useSelector(state => state.orderPay)\n    const {loading: loadingPay, success: successPay} = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const {loading: loadingDeliver, success: successDeliver} = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    if (!loading && !error){\n        order.itemsPrice = order.orderItems.reduce((acc,item) => acc + item.price * item.qty, 0).toFixed(2)\n\n    }\n\n    // const addPayPalScript = () => {\n    //     const script = document.createElement('script')\n    //     script.type = 'test/javascript'\n    //     script.src = \"https://www.paypal.com/sdk/js?client-id=AfMS5hQmnyBW3oam7UmMp4B8Bk612ky2npFD4a8_-osb6bsPrJmomJD9hB-wc7idSd2oNrbD4A8TNE2_\"\n    //     script.async = true  \n    //     script.onload = () => {\n    //         setSdkReady(true)\n    //     }\n    //     document.body.appendChild(script)\n\n    // }\n\n    //paymentResult from paypal \n\n    // const successPaymentHandler = \n    //     (function(data, actions) {actions.order.capture()})\n    //     .then(paymentResult => {\n    //         dispatch(payOrder(orderId, paymentResult));\n    //     })\n        \n\n\n    useEffect(() => { \n        \n        if(!userInfo){\n            navigate('/login')\n        }\n        \n        if(!order || successPay || order._id !== Number(orderId)|| successDeliver ){\n            dispatch({type: cons.ORDER_PAY_RESET})\n            dispatch({type: cons.ORDER_DELIVER_RESET})\n            dispatch(getOrderDetail(orderId))\n            \n        }\n    },[dispatch, order, orderId, successPay, successDeliver])\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n    return loading? (\n        <Loader/> \n    ): error ? (\n        <Message variant='danger'> {error} </Message> \n    ) : (\n        <div>\n            <h1>ORDER: {order._id} </h1>   \n            <Row>\n                <Col md ={8}>\n                    <ListGroup variant='flush'> \n                        <ListGroup.Item>   \n                            <h2> Shipping </h2>\n                            <p> <strong> Name: </strong> {order.user.name}</p>\n                            <p> <strong> E-mail: </strong> <a href={`mailto:${order.user.email}`}>{order.user.email} </a> </p>\n                            <p> \n                                <strong> Shipping: </strong>\n                                {order.shippingAddress.address}, {order.shippingAddress.city}\n                                {' '}, {order.shippingAddress.postalCode}\n                                {' '},\n                                {order.shippingAddress.country}\n                            </p>  \n                            \n                            \n                            {order.isDelivered ? (\n                                <Message variant ='success'> Delivered on {order.deliveredAt} </Message>\n                            ): (\n                                <Message variant ='warning'> Not delivered </Message>\n                            )\n                            } \n                            \n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <h2> Payment Method </h2>\n            \n                            <p>\n                                <strong> Method: </strong>\n                                {order.paymentMethod}\n                            </p> \n                            \n                            {order.isPaid ? (\n                                <Message variant ='success'> Paid on {order.paidAt} </Message>\n                            ): (\n                                <Message variant ='warning'> Not paid </Message>\n                            )}\n                            \n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <h2> Order Items  </h2>\n                            {order.orderItems.length === 0 ? <Message variant='info'> \n                                Order is empty. \n                                </Message>: (\n                                    <ListGroup variant='flush'> \n                                        {order.orderItems.map((item, index) => (\n                                            <ListGroup.Item key={index}> \n                                                <Row> \n                                                    <Col md={1}> \n                                                    <Image src={item.image} alt={item.name} fluid rounded/>\n                                                    </Col>\n\n                                                    <Col>\n                                                        <Link to = {`/product/${item.product}`}> {item.name} </Link> \n                                                    </Col>\n\n                                                    <Col md={4}> \n                                                        {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                    </Col>\n                                                </Row>\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n\n                                )}\n                        </ListGroup.Item>\n\n                    </ListGroup>\n                </Col>\n\n                <Col md={4}>\n                    <Card> \n                        <ListGroup>\n                            <ListGroup.Item> \n                                <h2> Order Summary </h2>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item> \n                                <Row> \n                                    <Col> Item: </Col>\n                                    <Col> ${order.itemsPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item> \n                                <Row> \n                                    <Col> Shipping: </Col>\n                                    <Col> ${order.shippingPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item> \n                                <Row> \n                                    <Col> Tax: </Col>\n                                    <Col> ${order.taxPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            <ListGroup.Item> \n                                <Row> \n                                    <Col> Total: </Col>\n                                    <Col> ${order.totalPrice}</Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                            {!order.isPaid &&(\n                                <ListGroup.Item>\n                                    {loadingPay && <Loader/> }\n                                \n                                    <PayPalScriptProvider options={{'client-id': 'AfMS5hQmnyBW3oam7UmMp4B8Bk612ky2npFD4a8_-osb6bsPrJmomJD9hB-wc7idSd2oNrbD4A8TNE2_' }}> \n                                            <PayPalButtons\n                                                createOrder={(data, actions) => {\n                                                return actions.order.create({\n                                                        purchase_units: [\n                                                            {\n                                                                amount: {\n                                                                    value: order.totalPrice,\n                                                                },\n                                                            },\n                                                        ],\n                                                    })\n                                                }}\n                                                onApprove = {function (data, actions) {\n                                                    return actions.order.capture().then(function (paymentResult) {\n                                                        // Your code here after capture the order\n                                                    \n                                                        dispatch(payOrder(orderId, paymentResult))\n                                                    });\n                                                }}\n                                    \n                                        />\n                                    </PayPalScriptProvider>\n                                    \n                                    \n                                </ListGroup.Item>\n\n\n                            )}\n\n                        </ListGroup>  \n                        {loadingDeliver && <Loader />}\n                        {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered &&(\n                            <ListGroup.Item> \n                                <Button \n                                type = 'button'\n                                className='btn btn-block'\n                                onClick = {deliverHandler}\n                                > \n                                    Mark as Delivered\n                                </Button>\n                            </ListGroup.Item>\n                        )}\n\n                    </Card>\n                </Col>\n            </Row>\n        </div>    \n\n    )\n} \n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductListScreen.js",["266","267","268","269","270","271"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation, } from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap';\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport * as cons from '../constants/productConstants'\n\nexport default function UserListScreen() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch() \n\n    const productList = useSelector(state => state.productList)\n    const {loading, error, products, page, pages} =  productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const {loading: loading_delete, error:error_delete,success: success_delete} =  productDelete\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const productCreate = useSelector(state => state.productCreate)\n    const {loading: loading_create, error:error_create,success: success_create, product:createdProduct} =  productCreate\n\n    const location = useLocation()\n    let keyword = location.search\n\n    useEffect(() => {\n        dispatch({type: cons.PRODUCT_CREATE_RESET})\n\n        if(!userInfo.isAdmin){\n            navigate('/login')\n        }\n\n        if(success_create){\n            navigate(`/admin/product/${createdProduct._id}/edit`)\n        }else{\n            dispatch(listProducts(keyword))\n        }\n       \n    }, [dispatch, userInfo, success_delete, success_create, createProduct, keyword])\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete this product? ')){\n            // delete product\n            dispatch(deleteProduct(id))\n        }\n    }\n\n    const createProductHandler = () => {\n        //create product \n        dispatch(createProduct())\n\n    }\n    \n  return (\n    <div>\n        <Row className ='align-items-center'> \n            <Col> \n                <h1> Product</h1>\n            </Col>\n            <Col className='text-right'> \n                <Button className='my-3' onClick={createProductHandler}> \n                    <i className='fas fa-plus'>  </i> Create Product\n                </Button>\n            </Col>\n        </Row>\n\n        {loading_delete && <Loader/>} \n        {error_delete && <Message variant='danger'> {error_delete} </Message>  }\n        \n        {loading_create && <Loader/>} \n        {error_create && <Message variant='danger'> {error_create} </Message>  }\n\n        {loading \n            ? (<Loader/> )\n            : error\n                ?( <Message variant='danger'> {error} </Message>)\n                :(\n                    <div> \n                        <Table striped bordered hover className='table-sm'>\n                            <thead> \n                                <tr> \n                                    <th> ID </th>\n                                    <th> NAME </th>\n                                    <th> PRICE </th>\n                                    <th> CATEGORY</th>\n                                    <th> BRAND</th>\n                                    <th> </th>\n                                </tr>\n                            </thead> \n                            <tbody > \n                                \n                                {products.map(product =>(\n                                    <tr key = {product._id} >\n                                        <td> {product._id} </td> \n                                        <td> {product.name} </td> \n                                        <td> ${product.price} </td> \n                                        <td> {product.category} </td> \n                                        <td> {product.brand} </td> \n                                    \n                                        <td> \n                                            <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                                                <Button variant='light' className='btn-sm'> \n                                                    <i className='fas fa-edit'></i>\n                                                </Button>\n\n                                            </LinkContainer>\n\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}> \n                                                    <i className='fas fa-trash'></i>\n                                            </Button>\n\n                                        </td>\n                                    </tr>\n\n                                ))}\n                                \n\n                            </tbody>\n\n                        </Table>\n                        <Paginate pages={pages} page={page} isAdmin={true} /> \n                    </div>\n                )\n        }\n    </div>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/LoginScreen.js",["272"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { login } from '../actions/userActions'\n\nexport default function LoginScreen() {\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n    // const[searchParams, setSearchParams]= useSearchParams(); \n    // const redirect = searchParams.get('redirect');\n\n    const location = useLocation()\n    const navigate = useNavigate(); \n    const dispatch = useDispatch()\n\n    const redirect = location.state? Number(location.state) : '/'\n    const userLogin = useSelector(state => state.userLogin)\n    const {error, loading, userInfo} = userLogin\n\n    useEffect(() => {\n        if(userInfo) {\n            navigate(redirect)\n        }\n    }, [navigate, userInfo, redirect])\n\n\n\n    const submitHandler = (e) => { \n        e.preventDefault()\n        dispatch(login(email,password))    \n    }\n\n  return (\n    <FormContainer>\n        <h1> Sign In </h1>\n        {error && <Message variant='danger'> {error} </Message>  }\n        {loading && <Loader />}\n        <Form onSubmit={submitHandler}> \n            <Form.Group controlId ='email'>\n                <Form.Label> Email Address </Form.Label>\n                <Form.Control                     \n                    type=\"email\"\n                    placeholder =\"Enter Email\"\n                    value = {email}\n                    onChange = {(e) => setEmail(e.target.value)}\n                > \n\n                </Form.Control>\n            </Form.Group>\n\n\n            <Form.Group controlId ='password'>\n                <Form.Label> Password </Form.Label>\n                <Form.Control                     \n                    type=\"password\"\n                    placeholder =\"Enter Password\"\n                    value = {password}\n                    onChange = {(e) => setPassword(e.target.value)}\n                >  \n\n                </Form.Control>\n            </Form.Group>\n\n\n            <Button type='submit' variant='primary'>\n                Sign in \n            </Button>\n        </Form>\n\n        <Row className='py-3'>\n            <Col>\n                New customer ?\n                     <Link to={redirect ? `/register?redirect=${redirect}` : '/register'}> \n                        Register \n                    </Link>\n            </Col>\n        </Row>\n\n    </FormContainer>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/PaymentScreen.js",["273","274","275","276","277","278","279","280"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutStep from '../components/CheckoutStep'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { savePaymentMethod, saveShippingAddress } from '../actions/cartActions'\n\n\nexport default function PaymentScreen() {\n \n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart \n\n    const [paymentMethod, setPaymentMethod] = useState('Paypal')\n\n    if(!shippingAddress.address){\n        navigate('/shipping')\n    }\n\n    const submitHandler = (e) =>  {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        navigate('/placeorder')\n    }\n\n    return (\n        <FormContainer>\n            <CheckoutStep step1 step2 step3/> \n            <Form onSubmit={submitHandler}>\n                <Form.Group> \n                    <Form as='legend'> Select Method </Form>\n                    <Col> \n                        <Form.Check\n                            type='radio'\n                            label ='PayPal or Credit Card'\n                            id = 'paypal'\n                            name = 'paymentMethod'\n                            checked\n                            onChange={(e) => setPaymentMethod(e.target.value) }\n                        > \n                        </Form.Check>\n                    </Col>\n\n                </Form.Group>\n\n                <Button type='submit' variant='primary'> \n                    Continue\n                </Button>   \n\n            </Form>\n        </FormContainer>\n    )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/UserEditScreen.js",["281","282","283","284"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { getUserDetails, updateUser } from '../actions/userActions'\nimport { useParams } from 'react-router-dom'\nimport * as cons from '../constants/userConstants'\n\nexport default function UserEditScreen() {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setAdmin] = useState(false)\n\n    const params  = useParams()\n    const userId = params.id\n\n    const location = useLocation()\n    const navigate = useNavigate(); \n    const dispatch = useDispatch()\n\n   \n    const userDetails = useSelector(state => state.userDetails)\n    const {error, loading, user} =  userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const {error: error_update, loading: loading_update, success: success_update} =  userUpdate\n    \n    useEffect(() => {\n\n        if(success_update){\n            dispatch({type: cons.USER_UPDATE_RESET})\n            navigate('/admin/userlist')\n        }else{\n\n            if(!user.name || user._id !== Number(userId)){\n                    dispatch(getUserDetails(userId))\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n                setAdmin(user.isAdmin)\n            }\n        }      \n    }, [userId, user, success_update, navigate])\n\n\n\n    const submitHandler = (e) => { \n        e.preventDefault()\n        dispatch(updateUser({_id: user._id, name, email, isAdmin}))\n    }\n\n    return ( \n        <div> \n            <Link to='/admin/userlist/'> Go Back </Link> \n            <FormContainer>\n                <h1> Edit User </h1>\n                {loading? <Loader /> : error ? <Message variant='danger'> {error} </Message> \n                    :(\n                        <Form onSubmit={submitHandler}> \n\n                            <Form.Group controlId ='name'>\n                                <Form.Label> Name </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"name\"\n                                    placeholder =\"Enter Name\"\n                                    value = {name}\n                                    onChange = {(e) => setName(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n        \n                            <Form.Group controlId ='email'>\n                                <Form.Label> Email Address </Form.Label>\n                                <Form.Control   \n                                                    \n                                    type=\"email\"\n                                    placeholder =\"Enter Email\"\n                                    value = {email}\n                                    onChange = {(e) => setEmail(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n        \n                            <Form.Group controlId ='isadmin'>\n                                <Form.Check                  \n                                    type=\"checkbox\"\n                                    label =\"Is Admin\"\n                                    checked = {isAdmin}\n                                    onChange = {(e) => setAdmin(e.target.checked)}\n                                >  \n                                </Form.Check>\n                            </Form.Group>\n        \n                            <Button type='submit' variant='primary'>\n                                Update\n                            </Button>\n        \n                        </Form> \n    \n                        \n                    ) }\n            </FormContainer>\n        </div>\n    )\n}\n       ","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/ProductEditScreen.js",["285","286"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { listProductsDetails, updateProduct } from '../actions/productActions'\nimport { useParams } from 'react-router-dom'\nimport * as cons from '../constants/productConstants'\nimport axios from 'axios'\n\nexport default function ProductEditScreen() {\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState('')\n    const [countInStock, setCountInStock] = useState(0)\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const params  = useParams()\n    const productId = params.id\n\n    const location = useLocation()\n    const navigate = useNavigate(); \n    const dispatch = useDispatch()\n\n   \n    const productDetails = useSelector(state => state.productDetail)\n    const {error, loading, product} =  productDetails\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const {error:errorUpdate, loading:loadingUpdate, success: successUpdate} =  productUpdate\n\n\n    useEffect(() => {\n\n        if(successUpdate){\n            dispatch({type: cons.PRODUCT_UPDATE_RESET})\n            navigate('/admin/productlist')\n\n        }else{\n\n            if(!product.name || product._id !== Number(productId)){\n                dispatch(listProductsDetails(productId))\n            }else{\n            setName(product.name)\n            setPrice(product.price)\n            setBrand(product.brand)\n            setImage(product.image)\n            setCategory(product.category)\n            setCountInStock(product.countInStock)\n            setDescription(product.description)\n            }\n        }\n\n    }, [productId, product, dispatch, successUpdate])\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        //formdata accpet key value pairs. \n        const formData = new FormData()\n        formData.append('image', file)\n        formData.append('product_id', productId)\n\n        setUploading(true)\n        try{\n            //config to let what type of data we are sending\n            const config = {\n                headers:{ \n                \"Content-Type\": \"multipart/form-data\"}\n            }\n\n            const {data} = await axios.post(`/api/products/upload/`, formData, config)\n             \n            setImage(data)\n            setUploading(false)\n\n\n        }catch(error){\n            setUploading(false)\n\n        }\n    }\n\n    const submitHandler = (e) => { \n        e.preventDefault()\n        //update product\n        dispatch(updateProduct({\n            _id:productId, \n            name,\n            price,\n            image, \n            brand,\n            category,\n            countInStock,\n            description\n        }))\n        \n    }\n\n    return ( \n        <div> \n            <Link to='/admin/productlist/'> Go Back </Link> \n            <FormContainer>\n                <h1> Edit Product </h1>\n                {loadingUpdate && <Loader />}\n                {errorUpdate && <Message variant='danger'> {errorUpdate} </Message> }\n\n                {loading? <Loader /> : error ? <Message variant='danger'> {error} </Message> \n                    :(\n                        <Form onSubmit={submitHandler}> \n\n                            <Form.Group controlId ='name'>\n                                <Form.Label> Name </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"name\"\n                                    placeholder =\"Enter Name\"\n                                    value = {name}\n                                    onChange = {(e) => setName(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId ='price'>\n                                <Form.Label> Price </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"number\"\n                                    placeholder =\"Enter price\"\n                                    value = {price}\n                                    onChange = {(e) => setPrice(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId ='image'>\n                                <Form.Label> Image </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"text\"\n                                    placeholder =\"Enter Image\"\n                                    value = {image}\n                                    onChange = {(e) => setImage(e.target.value)}\n                                > \n                                </Form.Control>\n\n                                <Form.Control\n                                    type='file'\n                                    onChange={uploadFileHandler}\n                                > \n\n                                </Form.Control>\n                                {uploading && <Loader />}\n                            </Form.Group>\n\n                            <Form.Group controlId ='brand'>\n                                <Form.Label> Brand </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"text\"\n                                    placeholder =\"Enter Brand\"\n                                    value = {brand}\n                                    onChange = {(e) => setBrand(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId ='countInStock'>\n                                <Form.Label> CountInStock </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"number\"\n                                    placeholder =\"Enter CountInStock\"\n                                    value = {countInStock}\n                                    onChange = {(e) => setCountInStock(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId ='category'>\n                                <Form.Label> Category </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"text\"\n                                    placeholder =\"Enter Category\"\n                                    value = {category}\n                                    onChange = {(e) => setCategory(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group controlId ='description'>\n                                <Form.Label> Description </Form.Label>\n                                <Form.Control     \n                                                \n                                    type=\"text\"\n                                    placeholder =\"Enter Description\"\n                                    value = {description}\n                                    onChange = {(e) => setDescription(e.target.value)}\n                                > \n                                </Form.Control>\n                            </Form.Group>\n        \n                         \n        \n        \n                            <Button type='submit' variant='primary'>\n                                Update\n                            </Button>\n        \n                        </Form> \n    \n                        \n                    ) }\n            </FormContainer>\n        </div>\n    )\n}\n       ","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/UserListScreen.js",["287","288","289","290","291","292","293","294","295"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation, } from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap';\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\nexport default function UserListScreen() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch() \n    const userList = useSelector(state => state.userList)\n    const {loading, error, users} = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n\n    const userDelete = useSelector(state => state.userDelete)\n    const {success:success_delete} = userDelete\n\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin){\n            dispatch(listUsers())\n        }else{\n            navigate('/login')\n        }\n       \n    }, [dispatch, success_delete, userInfo])\n\n    const deleteHandler = (id) => {\n\n        if (window.confirm('Are you sure you want to delete the user? ')){\n            dispatch(deleteUser(id)) \n        }\n    }\n    \n  return (\n    <div>\n        <h1> Users </h1>\n        {loading \n            ? (<Loader/> )\n            : error\n                ?( <Message variant='danger'> {error} </Message>)\n                :(\n                    <Table striped bordered hover className='table-sm'>\n                        <thead> \n                            <tr> \n                                <th> ID </th>\n                                <th> NAME </th>\n                                <th> EMAIL </th>\n                                <th> ADMIN </th>\n                                <th> </th>\n                            </tr>\n                        </thead> \n                        <tbody > \n                            \n                            {users.map(user =>(\n                                <tr key = {user._id} >\n                                    <td> {user._id} </td> \n                                    <td> {user.name} </td> \n                                    <td> {user.email} </td> \n                                    <td> {user.isAdmin ? (\n                                        <i className='fas fa-check' style = {{color: 'green'}}></i>\n                                    ):(\n                                        <i className='fas fa-check' style = {{color: 'red'}}></i>\n                                    )} </td>\n\n                                    <td> \n                                        <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                                            <Button variant='light' className='btn-sm'> \n                                                <i className='fas fa-edit'></i>\n                                            </Button>\n\n                                        </LinkContainer>\n\n                                        <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}> \n                                                <i className='fas fa-trash'></i>\n                                        </Button>\n\n                                    </td>\n                                </tr>\n\n                            ))}\n                            \n\n                        </tbody>\n\n                    </Table>\n                )\n        }\n    </div>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/OrderListScreen.js",["296","297","298","299","300","301","302","303","304"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation, } from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap';\nimport {Form, Button, Row, Col, Table} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport {useDispatch, useSelector } from 'react-redux'\nimport { listOrders } from '../actions/orderAction'\n\nexport default function OrderListScreen() {\n    const navigate = useNavigate()\n    const dispatch = useDispatch() \n\n    const orderList = useSelector(state => state.orderList)\n    const {loading, error, orders} = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin){\n            dispatch(listOrders())\n        }else{ \n            navigate('/login')\n        }\n       \n    }, [dispatch, userInfo])\n\n    \n  return (\n    <div>\n        <h1> Orders </h1>\n        {loading \n            ? (<Loader/> )\n            : error\n                ?( <Message variant='danger'> {error} </Message>)\n                :(\n                    <Table striped bordered hover className='table-sm'>\n                        <thead> \n                            <tr> \n                                <th> ID </th>\n                                <th> USER </th>\n                                <th> DATE </th>\n                                <th> PRICE </th>\n                                <th> PAID </th>\n                                <th> DELIVERED </th>\n                                <th> </th>\n                            </tr>\n                        </thead> \n                        <tbody > \n                            \n                            {orders.map(order =>(\n                                <tr key = {order._id} >\n                                    <td> {order._id} </td> \n                                    <td> {order.user && order.user.name} </td> \n                                    <td> {order.createdAt.substring(0,10)} </td> \n                                    <td> ${order.totalPrice} </td> \n                                    <td> {order.isPaid ? (\n                                       order.paidAt.substring(0,10)\n                                    ):(\n                                       <i className='fas fa-check' style={{color:'red'}}> </i>\n                                       )}\n                                    </td>\n\n                                    <td> {order.isDelivered ? (\n                                       order.deliveredAt.substring(0,10)\n                                    ):(\n                                       <i className='fas fa-check' style={{color:'red'}}> </i>\n                                       )}\n                                    </td>\n\n                                    <td> \n                                        <LinkContainer to={`/order/${order._id}`}>\n                                            <Button variant='light' className='btn-sm'> \n                                                Details\n                                            </Button>\n\n                                        </LinkContainer>\n\n                                    </td>\n                                </tr>\n\n                            ))}\n                            \n\n                        </tbody>\n\n                    </Table>\n                )\n        }\n    </div>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/screens/PlaceOrderScreen.js",["305","306","307","308","309","310","311","312"],[],"import React, {useState, useEffect} from 'react'\nimport {Link, useSearchParams, useNavigate, useLocation } from 'react-router-dom'\nimport {Form, Button, Row, Col, Image, ListGroup, ListGroupItem, Card} from 'react-bootstrap'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutStep from '../components/CheckoutStep'\nimport {useDispatch, useSelector } from 'react-redux'\nimport {createOrder} from '../actions/orderAction'\nimport * as cons from '../constants/orderContants'\n\n\nexport default function PlaceOrderScreen() {\n    const cart = useSelector(state => state.cart) \n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const {order, error, success} = orderCreate\n\n    cart.itemsPrice = cart.cartItems.reduce((acc,item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = Number(cart.itemsPrice * (0.082)).toFixed(2)\n    cart.totalPrice = ( Number(cart.itemsPrice) + Number(cart.shippingPrice) +  Number(cart.taxPrice)).toFixed(2)\n\n\n\n    useEffect(() => {\n        if(success){\n            navigate(`/order/${order._id}`)\n            dispatch({type: cons.ORDER_CREATE_RESET})\n        }\n        if(!cart.paymentMethod){\n            navigate(`/payment`)\n        }\n    },[success, navigate, cart])\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems: cart.cartItems,\n            shippingAddress: cart.shippingAddress,\n            paymentMethod: cart.paymentMethod,\n            itemsPrice: cart.itemsPrice,\n            shippingPrice : cart.shippingPrice,\n            taxPrice: cart.taxPrice,\n            totalPrice: cart.totalPrice\n        }))\n    }\n\n\n\n\n  return (\n    <div>\n        <CheckoutStep step1 step2 step3 step4 /> \n        <Row>\n            <Col md ={8}>\n                <ListGroup variant='flush'> \n                    <ListGroup.Item> \n                        <h2> Shipping </h2>\n                        <p> \n                            <strong> Shipping: </strong>\n                            {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                            {' '}, {cart.shippingAddress.postalCode}\n                            {' '},\n                            {cart.shippingAddress.country}\n                        </p>  \n                    </ListGroup.Item>\n\n                    <ListGroup.Item> \n                        <h2> Payment Method </h2>\n                        <p> \n                            <strong> Method: </strong>\n                            {cart.paymentMethod}\n                        </p>  \n                    </ListGroup.Item>\n\n                    <ListGroup.Item> \n                        <h2> Order Items  </h2>\n                        {cart.cartItems.length === 0 ? <Message variant='info'> \n                            Your cart is empty. \n                            </Message>: (\n                                <ListGroup variant='flush'> \n                                    {cart.cartItems.map((item, index) => (\n                                        <ListGroup.Item key={index}> \n                                            <Row> \n                                                <Col md={1}> \n                                                <Image src={item.image} alt={item.name} fluid rounded/>\n                                                </Col>\n\n                                                <Col>\n                                                    <Link to = {`/product/${item.product}`}> {item.name} </Link> \n                                                </Col>\n\n                                                <Col md={4}> \n                                                    {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)}\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n\n                            )}\n                    </ListGroup.Item>\n\n                </ListGroup>\n            </Col>\n\n            <Col md={4}>\n                <Card> \n                    <ListGroup>\n                        <ListGroup.Item> \n                            <h2> Order Summary </h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <Row> \n                                <Col> Item: </Col>\n                                <Col> ${cart.itemsPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <Row> \n                                <Col> Shipping: </Col>\n                                <Col> ${cart.shippingPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <Row> \n                                <Col> Tax: </Col>\n                                <Col> ${cart.taxPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                            <Row> \n                                <Col> Total: </Col>\n                                <Col> ${cart.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item> \n                           {error && <Message variant='danger'> {error} </Message>}\n                        </ListGroup.Item>\n                    \n\n                        <ListGroup.Item> \n                            <Button\n                                type='button'\n                                className ='btn-block'\n                                disabled= {cart.cartItems === 0}\n                                onClick = {placeOrder}\n                            > \n                                Place Order\n                            </Button>\n                        </ListGroup.Item>\n                    </ListGroup>  \n\n                </Card>\n            </Col>\n        </Row>\n\n    </div>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/productConstants.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/userConstants.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/orderContants.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Loader.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/constants/cartConstants.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Product.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Paginate.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/ProductCarousel.js",["313","314"],[],"import React, { useEffect }  from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link} from 'react-router-dom'\nimport {Carousel, Image} from 'react-bootstrap'\nimport Loader from './Loader'\nimport Message from './Message'\nimport { listTopProducts } from '../actions/productActions'\n\nexport default function ProductCarousel() {\n\n    const dispatch = useDispatch() \n    const productTopRated = useSelector(state => state.productTopRated)\n    const { error, loading, products } = productTopRated\n\n    useEffect(() => {\n        dispatch(listTopProducts())\n    },dispatch)\n  \nreturn (loading ? <Loader/> \n    : error \n    ? <Message variant='danger'> {error} </Message> \n    : (\n        <Carousel pause='hover' className ='bg-dark'>\n        {products.map(product => (\n            <Carousel.Item key={product._id}> '\n                <Link to={`product/${product._id}`}> \n                    <Image src={product.image} alt = {product.name} fluid/> \n                    <Carousel.Caption className='carousel caption'> \n                        <h4> {product.name} (${product.price})</h4>\n                    </Carousel.Caption>\n                </Link>\n            </Carousel.Item>\n            \n            ))}\n        </Carousel>\n    )\n\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Rating.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/FormContainer.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/CheckoutStep.js",["315"],[],"import React from 'react'\nimport { Nav } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Link } from 'react-router-bootstrap'\n\nexport default function checkoutStep({step1, step2, step3, step4}) {\n  return (\n    <Nav className='justify-content-center mb-4'>\n        <Nav.Item> \n            {step1 ?  (\n                <LinkContainer to='/login'> \n                    <Nav.Link> Login </Nav.Link>\n                </LinkContainer>\n\n            ) :(\n                <Nav.Link disabled> Login </Nav.Link>\n            )}\n        </Nav.Item>\n\n        <Nav.Item> \n            {step2 ?  (\n                <LinkContainer to='/shipping'> \n                    <Nav.Link> Shipping </Nav.Link>\n                </LinkContainer>\n\n            ) :(\n                <Nav.Link disabled> Shipping </Nav.Link>\n            )}\n        </Nav.Item>\n\n        <Nav.Item>  \n            \n            {step3 ?  (\n                <LinkContainer to='/payment'> \n                    <Nav.Link> Payment </Nav.Link>\n                </LinkContainer>\n\n            ) :(\n                <Nav.Link disabled> Payment </Nav.Link>\n            )}\n        </Nav.Item>\n        \n        <Nav.Item> \n            {step4 ?  (\n                <LinkContainer to='/placeorder'> \n                    <Nav.Link> Place order </Nav.Link>\n                </LinkContainer>\n\n            ) :(\n                <Nav.Link disabled> Place order </Nav.Link>\n            )}      \n        </Nav.Item>\n\n        \n    </Nav>\n  )\n}\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/SearchBox.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/components/Message.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/cartActions.js",[],[],"/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/userActions.js",["316"],[],"import * as cons from '../constants/userConstants'\nimport * as orderCons from '../constants/orderContants'\nimport axios from 'axios'\nimport { bindActionCreators } from '@reduxjs/toolkit'\n\n\nexport const login = (email, password) => async(dispatch) => {\n    try{\n        dispatch({\n            type: cons.USER_LOGIN_REQUEST,\n        })\n\n        const config={\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/login/',\n            {'username':email, 'password': password},\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_LOGIN_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\nexport const logout = () => (dispatch) => { \n    localStorage.removeItem('userInfo')\n    dispatch({type: cons.USER_LOGOUT })\n    dispatch({type: cons.USER_DETAILS_RESET})\n    dispatch({type: orderCons.ORDER_LIST_MY_RESET})\n    dispatch({type: cons.USER_LIST_RESET})\n} \n\n\n\nexport const register = (name, email, password) => async(dispatch) => {\n    try{\n        dispatch({\n            type: cons.USER_REGISTER_REQUEST,\n        })\n\n        const config={\n            headers: {\n                'Content-type': 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/register/',\n            {'name':name, 'email':email, 'password': password},\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_REGISTER_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:cons.USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_REGISTER_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\nexport const getUserDetails = (id) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.USER_DETAILS_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/users/${id}/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_DETAILS_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n// \n\nexport const updateUserProfile = (user) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.USER_UPDATE_PROFILE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/users/profile/update`,\n            user,\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_UPDATE_PROFILE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:cons.USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_UPDATE_PROFILE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\nexport const listUsers = () => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.USER_LIST_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/users/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_LIST_SUCCESS,\n            payload:data\n        })\n\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_LIST_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\n\n\nexport const deleteUser = (id) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.USER_DELETE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_DELETE_SUCCESS,\n            payload:data\n        })\n\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_DELETE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\n\nexport const updateUser = (user) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.USER_UPDATE_REQUEST\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n        )\n        \n        dispatch({\n            type:cons.USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type:cons.USER_DETAILS_SUCCESS, \n            payload: data\n        })\n\n\n    }catch(error){\n\n        dispatch({\n            type: cons.USER_UPDATE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/orderAction.js",["317"],[],"import * as cons  from '../constants/orderContants'\nimport * as cartcons from '../constants/cartConstants'\nimport axios from 'axios'\nimport { Container } from 'react-bootstrap'\n\n\nexport const createOrder = (order) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_CREATE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_CREATE_SUCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:cartcons.CART_CLEAR_ITEM,\n            payload:data\n        })\n\n        localStorage.removeItem('cartItems')\n\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_CREATE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\nexport const getOrderDetail = (id) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_DETAIL_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders/${id}/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_DETAIL_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_DETAIL_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\nexport const payOrder = (id, paymentResult) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_PAY_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_PAY_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_PAY_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\nexport const deliverOrder = (order) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_DELIVER_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/orders/${order._id}/deliver/`,\n            {},\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_DELIVER_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_DELIVER_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\n\nexport const listMyOrders = () => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_LIST_MY_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders/myorders/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_LIST_MY_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_LIST_MY_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\nexport const listOrders = () => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: cons.ORDER_LIST_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders/`,\n            config\n        )\n        \n        dispatch({\n            type:cons.ORDER_LIST_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: cons.ORDER_LIST_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n","/Users/richy_air/Documents/project/ecommerece/backend/frontend/src/actions/productActions.js",["318"],[],"import * as constants from '../constants/productConstants'\nimport axios from 'axios'\n\n// list Product action : making API request and get product list.\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try{\n        dispatch({type: constants.PRODUCT_LIST_REQUEST})\n\n        const {data} = await axios.get(`/api/products/${keyword}`)\n\n        dispatch({\n            type: constants.PRODUCT_LIST_SUCCESS,\n            payload: data})\n\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_LIST_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n\n    }\n}\n\n\nexport const listProductsDetails = (id) => async (dispatch) => {\n    try{\n        dispatch({type: constants.PRODUCT_DETAILS_REQUEST})\n\n        const {data} = await axios.get(`/api/products/${id}`)\n\n        dispatch({\n            type: constants.PRODUCT_DETAILS_SUCCESS,\n            payload: data})\n\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_DETAILS_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n\n    }\n}\n\n\n\nexport const listTopProducts = () => async (dispatch) => {\n    try{\n        dispatch({type: constants.PRODUCT_TOP_REQUEST})\n\n        const {data} = await axios.get(`/api/products/top`)\n\n        dispatch({\n            type: constants.PRODUCT_TOP_SUCCESS,\n            payload: data})\n\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_TOP_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n\n    }\n}\n\n\nexport const deleteProduct = (id) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: constants.PRODUCT_DELETE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.delete(\n            `/api/products/delete/${id}/`,\n            config\n        )\n        \n        dispatch({\n            type:constants.PRODUCT_DELETE_SUCCESS,\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_DELETE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\nexport const createProduct = () => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: constants.PRODUCT_CREATE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.post(\n            `/api/products/create/`,\n            {},\n            config\n        )\n        \n        //send to reducer and update the state\n        dispatch({\n            type:constants.PRODUCT_CREATE_SUCCESS,\n            payload: data,\n        })\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_CREATE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\n\nexport const updateProduct = (product) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: constants.PRODUCT_UPDATE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/products/update/${product._id}/`,\n            product,\n            config\n        )\n        \n        //send to reducer and update the state\n        dispatch({\n            type:constants.PRODUCT_UPDATE_SUCCESS,\n            payload: data,\n        })\n\n        dispatch({type: constants.PRODUCT_DETAILS_SUCCESS, \n                    payload: data})\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_UPDATE_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n\n\n\nexport const createProductReview = (productId, review) => async(dispatch, getState) => {\n    try{\n        dispatch({\n            type: constants.PRODUCT_CREATE_REVIEW_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo }\n        } = getState()\n\n        const config={\n            headers: {\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}` \n            }\n        }\n\n        //in review there are rating and comment\n        const {data} = await axios.post(\n            `/api/products/${productId}/reviews/`,\n            review,\n            config\n        )\n        \n        //send to reducer and update the state\n        dispatch({\n            type:constants.PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload: data,\n        })\n\n\n    }catch(error){\n\n        dispatch({\n            type: constants.PRODUCT_CREATE_REVIEW_FAILED,\n            payload: error.response && error.response.data.detail\n                ? error.response.data.detail\n                : error.message\n\n        })\n    }\n}\n\n",{"ruleId":"319","severity":1,"message":"320","line":1,"column":42,"nodeType":"321","messageId":"322","endLine":1,"endColumn":57},{"ruleId":"319","severity":1,"message":"323","line":3,"column":9,"nodeType":"321","messageId":"322","endLine":3,"endColumn":28},{"ruleId":"319","severity":1,"message":"324","line":20,"column":7,"nodeType":"321","messageId":"322","endLine":20,"endColumn":21},{"ruleId":"319","severity":1,"message":"325","line":3,"column":8,"nodeType":"321","messageId":"322","endLine":3,"endColumn":13},{"ruleId":"319","severity":1,"message":"326","line":3,"column":33,"nodeType":"321","messageId":"322","endLine":3,"endColumn":36},{"ruleId":"319","severity":1,"message":"327","line":4,"column":57,"nodeType":"321","messageId":"322","endLine":4,"endColumn":70},{"ruleId":"319","severity":1,"message":"328","line":11,"column":25,"nodeType":"321","messageId":"322","endLine":11,"endColumn":40},{"ruleId":"319","severity":1,"message":"329","line":1,"column":26,"nodeType":"321","messageId":"322","endLine":1,"endColumn":35},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"326","line":3,"column":23,"nodeType":"321","messageId":"322","endLine":3,"endColumn":26},{"ruleId":"319","severity":1,"message":"333","line":3,"column":28,"nodeType":"321","messageId":"322","endLine":3,"endColumn":31},{"ruleId":"319","severity":1,"message":"334","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"335","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":15},{"ruleId":"336","severity":1,"message":"337","line":140,"column":68,"nodeType":"338","messageId":"339","endLine":140,"endColumn":70},{"ruleId":"319","severity":1,"message":"340","line":1,"column":15,"nodeType":"321","messageId":"322","endLine":1,"endColumn":23},{"ruleId":"319","severity":1,"message":"331","line":9,"column":9,"nodeType":"321","messageId":"322","endLine":9,"endColumn":24},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"341","line":23,"column":11,"nodeType":"321","messageId":"322","endLine":23,"endColumn":19},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"342","line":3,"column":9,"nodeType":"321","messageId":"322","endLine":3,"endColumn":13},{"ruleId":"319","severity":1,"message":"327","line":3,"column":51,"nodeType":"321","messageId":"322","endLine":3,"endColumn":64},{"ruleId":"319","severity":1,"message":"343","line":6,"column":8,"nodeType":"321","messageId":"322","endLine":6,"endColumn":21},{"ruleId":"319","severity":1,"message":"344","line":20,"column":12,"nodeType":"321","messageId":"322","endLine":20,"endColumn":20},{"ruleId":"319","severity":1,"message":"345","line":20,"column":22,"nodeType":"321","messageId":"322","endLine":20,"endColumn":33},{"ruleId":"346","severity":1,"message":"347","line":73,"column":7,"nodeType":"348","endLine":73,"endColumn":61,"suggestions":"349"},{"ruleId":"319","severity":1,"message":"340","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"342","line":4,"column":9,"nodeType":"321","messageId":"322","endLine":4,"endColumn":13},{"ruleId":"319","severity":1,"message":"343","line":8,"column":8,"nodeType":"321","messageId":"322","endLine":8,"endColumn":21},{"ruleId":"346","severity":1,"message":"350","line":45,"column":8,"nodeType":"348","endLine":45,"endColumn":84,"suggestions":"351"},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"329","line":1,"column":26,"nodeType":"321","messageId":"322","endLine":1,"endColumn":35},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"326","line":3,"column":23,"nodeType":"321","messageId":"322","endLine":3,"endColumn":26},{"ruleId":"319","severity":1,"message":"334","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"335","line":5,"column":8,"nodeType":"321","messageId":"322","endLine":5,"endColumn":15},{"ruleId":"319","severity":1,"message":"352","line":9,"column":29,"nodeType":"321","messageId":"322","endLine":9,"endColumn":48},{"ruleId":"319","severity":1,"message":"341","line":20,"column":11,"nodeType":"321","messageId":"322","endLine":20,"endColumn":19},{"ruleId":"319","severity":1,"message":"353","line":29,"column":19,"nodeType":"321","messageId":"322","endLine":29,"endColumn":31},{"ruleId":"319","severity":1,"message":"354","line":29,"column":42,"nodeType":"321","messageId":"322","endLine":29,"endColumn":56},{"ruleId":"346","severity":1,"message":"355","line":46,"column":8,"nodeType":"348","endLine":46,"endColumn":48,"suggestions":"356"},{"ruleId":"319","severity":1,"message":"341","line":26,"column":11,"nodeType":"321","messageId":"322","endLine":26,"endColumn":19},{"ruleId":"346","severity":1,"message":"357","line":59,"column":8,"nodeType":"348","endLine":59,"endColumn":53,"suggestions":"358"},{"ruleId":"319","severity":1,"message":"340","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"342","line":4,"column":9,"nodeType":"321","messageId":"322","endLine":4,"endColumn":13},{"ruleId":"319","severity":1,"message":"326","line":4,"column":23,"nodeType":"321","messageId":"322","endLine":4,"endColumn":26},{"ruleId":"319","severity":1,"message":"333","line":4,"column":28,"nodeType":"321","messageId":"322","endLine":4,"endColumn":31},{"ruleId":"319","severity":1,"message":"343","line":7,"column":8,"nodeType":"321","messageId":"322","endLine":7,"endColumn":21},{"ruleId":"346","severity":1,"message":"357","line":32,"column":8,"nodeType":"348","endLine":32,"endColumn":44,"suggestions":"359"},{"ruleId":"319","severity":1,"message":"340","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"330","line":2,"column":9,"nodeType":"321","messageId":"322","endLine":2,"endColumn":13},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"342","line":4,"column":9,"nodeType":"321","messageId":"322","endLine":4,"endColumn":13},{"ruleId":"319","severity":1,"message":"326","line":4,"column":23,"nodeType":"321","messageId":"322","endLine":4,"endColumn":26},{"ruleId":"319","severity":1,"message":"333","line":4,"column":28,"nodeType":"321","messageId":"322","endLine":4,"endColumn":31},{"ruleId":"319","severity":1,"message":"343","line":7,"column":8,"nodeType":"321","messageId":"322","endLine":7,"endColumn":21},{"ruleId":"346","severity":1,"message":"357","line":29,"column":8,"nodeType":"348","endLine":29,"endColumn":28,"suggestions":"360"},{"ruleId":"319","severity":1,"message":"340","line":1,"column":16,"nodeType":"321","messageId":"322","endLine":1,"endColumn":24},{"ruleId":"319","severity":1,"message":"331","line":2,"column":15,"nodeType":"321","messageId":"322","endLine":2,"endColumn":30},{"ruleId":"319","severity":1,"message":"332","line":2,"column":45,"nodeType":"321","messageId":"322","endLine":2,"endColumn":56},{"ruleId":"319","severity":1,"message":"342","line":3,"column":9,"nodeType":"321","messageId":"322","endLine":3,"endColumn":13},{"ruleId":"319","severity":1,"message":"327","line":3,"column":51,"nodeType":"321","messageId":"322","endLine":3,"endColumn":64},{"ruleId":"319","severity":1,"message":"334","line":4,"column":8,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"343","line":6,"column":8,"nodeType":"321","messageId":"322","endLine":6,"endColumn":21},{"ruleId":"346","severity":1,"message":"361","line":36,"column":7,"nodeType":"348","endLine":36,"endColumn":32,"suggestions":"362"},{"ruleId":"346","severity":1,"message":"363","line":17,"column":7,"nodeType":"321","endLine":17,"endColumn":15},{"ruleId":"346","severity":1,"message":"355","line":17,"column":7,"nodeType":"321","endLine":17,"endColumn":15,"suggestions":"364"},{"ruleId":"319","severity":1,"message":"330","line":4,"column":10,"nodeType":"321","messageId":"322","endLine":4,"endColumn":14},{"ruleId":"319","severity":1,"message":"365","line":4,"column":10,"nodeType":"321","messageId":"322","endLine":4,"endColumn":28},{"ruleId":"319","severity":1,"message":"366","line":4,"column":10,"nodeType":"321","messageId":"322","endLine":4,"endColumn":19},{"ruleId":"319","severity":1,"message":"367","line":98,"column":16,"nodeType":"321","messageId":"322","endLine":98,"endColumn":20},"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","'composewithDevTools' is defined but never used.","'initialOptions' is assigned a value but never used.","'React' is defined but never used.","'Row' is defined but never used.","'ListGroupItem' is defined but never used.","'setSearchParams' is assigned a value but never used.","'useEffect' is defined but never used.","'Link' is defined but never used.","'useSearchParams' is defined but never used.","'useLocation' is defined but never used.","'Col' is defined but never used.","'Loader' is defined but never used.","'Message' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'location' is assigned a value but never used.","'Form' is defined but never used.","'FormContainer' is defined but never used.","'sdkReady' is assigned a value but never used.","'setSdkReady' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["368"],"React Hook useEffect has missing dependencies: 'createdProduct._id' and 'navigate'. Either include them or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["369"],"'saveShippingAddress' is defined but never used.","'error_update' is assigned a value but never used.","'loading_update' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["370"],"React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["371"],["372"],["373"],"React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["374"],"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.",["375"],"'bindActionCreators' is defined but never used.","'Container' is defined but never used.","'data' is assigned a value but never used.",{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, navigate]",{"range":"392","text":"393"},"Update the dependencies array to be: [dispatch, userInfo, success_delete, success_create, keyword, navigate, createdProduct._id]",{"range":"394","text":"395"},"Update the dependencies array to be: [userId, user, success_update, navigate, dispatch]",{"range":"396","text":"397"},"Update the dependencies array to be: [productId, product, dispatch, successUpdate, navigate]",{"range":"398","text":"399"},"Update the dependencies array to be: [dispatch, navigate, success_delete, userInfo]",{"range":"400","text":"401"},"Update the dependencies array to be: [dispatch, navigate, userInfo]",{"range":"402","text":"403"},"Update the dependencies array to be: [success, navigate, cart, order._id, dispatch]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch]",{"range":"406","text":"407"},[2542,2596],"[dispatch, order, orderId, successPay, successDeliver, userInfo, navigate]",[1723,1799],"[dispatch, userInfo, success_delete, success_create, keyword, navigate, createdProduct._id]",[1585,1625],"[userId, user, success_update, navigate, dispatch]",[2079,2124],"[productId, product, dispatch, successUpdate, navigate]",[1102,1138],"[dispatch, navigate, success_delete, userInfo]",[987,1007],"[dispatch, navigate, userInfo]",[1444,1469],"[success, navigate, cart, order._id, dispatch]",[582,590],"[dispatch]"]