{"ast":null,"code":"import { configureStore, combineReducers, applyMiddleware } from '@reduxjs/toolkit';\nimport thunk from 'redux-thunk';\nimport { composewithDevTools } from 'redux-devtools-extension';\nimport { productListReducer, productDetailReducer } from './reducer/productReducers';\nimport { cartReducer } from './reducer/cartReducers';\nimport userLoginReducer from './reducer/userReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetail: productDetailReducer,\n  cart: cartReducer,\n  userlogin: userLoginReducer\n});\n\n// get string to JSON load in localstorages\nconst cartItemFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nexport const initialState = {\n  cart: {\n    cartItems: cartItemFromStorage\n  }\n};\n\n// thunk \nconst middleware = [thunk];\nconst store = configureStore({\n  reducer: reducer,\n  preloadedState: initialState,\n  middleware: middleware\n});\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","applyMiddleware","thunk","composewithDevTools","productListReducer","productDetailReducer","cartReducer","userLoginReducer","reducer","productList","productDetail","cart","userlogin","cartItemFromStorage","localStorage","getItem","JSON","parse","initialState","cartItems","middleware","store","preloadedState"],"sources":["/Users/richy_air/Documents/project/ecommerece/frontend/src/store.js"],"sourcesContent":["import {configureStore, combineReducers, applyMiddleware} from '@reduxjs/toolkit'\nimport thunk from 'redux-thunk'\nimport {composewithDevTools} from 'redux-devtools-extension'\nimport {productListReducer, productDetailReducer} from './reducer/productReducers'\nimport {cartReducer} from './reducer/cartReducers'\nimport userLoginReducer from './reducer/userReducers'\n\nconst reducer = combineReducers({\n    productList: productListReducer,\n    productDetail : productDetailReducer,\n    cart: cartReducer,\n    userlogin: userLoginReducer,\n\n})\n\n// get string to JSON load in localstorages\nconst cartItemFromStorage = localStorage.getItem('cartItems') ?\n        JSON.parse(localStorage.getItem('cartItems')) : [];\n\n\nexport const initialState = {\n    cart: {cartItems: cartItemFromStorage}\n};\n\n// thunk \nconst middleware = [thunk]; \n\n\nconst store = configureStore({\n    reducer: reducer,\n    preloadedState: initialState,\n    middleware: middleware,\n});\n\nexport default store; "],"mappings":"AAAA,SAAQA,cAAc,EAAEC,eAAe,EAAEC,eAAe,QAAO,kBAAkB;AACjF,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAAQC,mBAAmB,QAAO,0BAA0B;AAC5D,SAAQC,kBAAkB,EAAEC,oBAAoB,QAAO,2BAA2B;AAClF,SAAQC,WAAW,QAAO,wBAAwB;AAClD,OAAOC,gBAAgB,MAAM,wBAAwB;AAErD,MAAMC,OAAO,GAAGR,eAAe,CAAC;EAC5BS,WAAW,EAAEL,kBAAkB;EAC/BM,aAAa,EAAGL,oBAAoB;EACpCM,IAAI,EAAEL,WAAW;EACjBM,SAAS,EAAEL;AAEf,CAAC,CAAC;;AAEF;AACA,MAAMM,mBAAmB,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,GACrDC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE;AAG1D,OAAO,MAAMG,YAAY,GAAG;EACxBP,IAAI,EAAE;IAACQ,SAAS,EAAEN;EAAmB;AACzC,CAAC;;AAED;AACA,MAAMO,UAAU,GAAG,CAAClB,KAAK,CAAC;AAG1B,MAAMmB,KAAK,GAAGtB,cAAc,CAAC;EACzBS,OAAO,EAAEA,OAAO;EAChBc,cAAc,EAAEJ,YAAY;EAC5BE,UAAU,EAAEA;AAChB,CAAC,CAAC;AAEF,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}